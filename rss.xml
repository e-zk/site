<rss version="2.0" xml:base="https://zakaria.org">
<channel>
<title>zakaria's web log</title>
<description/>
<link>https://zakaria.org</link>
<item>
<link>https://zakaria.org/posts/2021-01-04-xenodm</link>
<title>My xenodm setup</title>
<description>
<h1 id="My%20xenodm%20setup">My xenodm setup</h1>

<p>OpenBSD uses the <a href="https://man.openbsd.org/xenodm"><code>xenodm(1)</code></a> display manager, which is a fork of xdm.<br/>
Xenodm looks quite ugly by default, and after reading a couple<sup id="fnref1"><a href="#fn1" rel="footnote">1</a></sup> of<sup id="fnref2"><a href="#fn2" rel="footnote">2</a></sup> articles<sup id="fnref3"><a href="#fn3" rel="footnote">3</a></sup> on themeing xenodm I&#39;ve come up with my own setup.</p>

<p>Before we get into the configs, here&#39;s what it actually looks like:</p>

<p><a href="/static/img/xenodm.png"><img src="/static/img/xenodm.png" alt="themed xenodm" /></a></p>

<p><em>(The text might be small, click to view the image file)</em></p>

<p>Clean and simple. Now that you&#39;ve seen what it looks like you can close this tab if that&#39;s all you came here to see. If you want to see how this is accomplished then continue reading.</p>

<h2 id="Files">Files</h2>

<p>xenodm uses multiple files for configuration. It&#39;s quite inconvenient, and I was very confused at first I admit. The files we&#39;ll had to deal with are:</p>

<pre><code>&#47;etc&#47;X11&#47;xenodm&#47;Xresources
&#47;etc&#47;X11&#47;xenodm&#47;Xsetup_0
&#47;etc&#47;X11&#47;xenodm&#47;Xsession
</code></pre>

<p>The last one is for an optional non-cosmetic change that I&#39;ll cover later. All these files require root access, so it&#39;d be wise to <code>doas -s</code> before continuing on.</p>

<h2 id="Xresources">Xresources</h2>

<p>If you&#39;ve ever dabbled in trying to rice your Unix-like operating system there&#39;s a good change you&#39;ve come across an <a href="https://wikipedia.org/wiki/X_resources">Xresources</a> file before. The X window system uses a &#8220;resource database&#8221; as a &#8216;unified&#8217; way to store configuration data.</p>

<p>xenodm sources the Xresources file before loading. Using entries in the Xresources file we can configure what the login widget (the place we type our username + password) looks like.</p>

<p>First off, I&#39;d like to be able to see my password being entered as I type with little <code>*</code> as it so commonly is.</p>

<pre><code>xlogin.Login.echoPasswd: true
</code></pre>

<p>Next I don&#39;t want to be &#8216;greeted&#8217;, and I want the message when I put my password in incorrectly to be <code>ya dun goofed</code>:</p>

<pre><code>xlogin.Login.fail: ya dun goofed
xlogin.Login.greeting:
</code></pre>

<p>Now I&#39;ll configure the dimensions and positioning of the login box:</p>

<pre><code>xlogin.Login.height:            200
xlogin.Login.width:             400
xlogin.Login.y:                 320
xlogin.Login.frameWidth:        10
xlogin.Login.innerFramesWidth:  0
</code></pre>

<p>Add some colour (or lack thereof):</p>

<pre><code>xlogin.Login.background:        #000000
xlogin.Login.foreground:        #eeeeee
xlogin.Login.failColor:         #b00035
xlogin.Login.inpColor:          #000000
xlogin.Login.promptColor:       #eeeeee
xlogin.Login.hiColor:           #000000
xlogin.Login.shdColor:          #000000
</code></pre>

<p>And finally let&#39;s use a nice bitmap font to complete the look:</p>

<pre><code>xlogin.Login.face:              Dina-11
xlogin.Login.failFace:          Dina-11
xlogin.Login.promptFace:        Dina-11
</code></pre>

<p>Note that last step requires the Dina font to be installed (it does not come with OpenBSD).</p>

<h2 id="Xsetup_0">Xsetup_0</h2>

<p>Next is the Xsetup file. Why is this called Xsetup_<em>0</em>? Because xenodm can be configured to run multiple X display servers, and the main one is 0, hence the 0 (check out <code>&#47;etc&#47;X11&#47;xenodm&#47;xenodm-config</code>).</p>

<p>This file is fairly simple. It&#39;s a shell script that xenodm runs. That&#39;s it. Simple as that. Through this script we can run pretty much any program we like. In my case, a simple lemonbar script:</p>

<pre><code>#!&#47;bin&#47;sh

# set background
&#47;usr&#47;X11R6&#47;bin&#47;xsetroot -solid \#000000

# add Dina font to font list
&#47;usr&#47;X11R6&#47;bin&#47;xset fp+ &#47;usr&#47;local&#47;share&#47;font&#47;dina
 
# status bar
(
while true; do
        reboot="%{F#b00035}%{A:reboot:} r %{A}%{F-}"
        shutdown="%{F#b00035}%{A:shutdown -p now:} p %{A}%{F-}"

        echo "  $(date &#39;+%T&#39;)  %{r}${reboot}&#47;${shutdown}  $(date &#39;+%F&#39;)    $(apm -l)%  "
        sleep 1
done | &#47;home&#47;zzz&#47;bin&#47;lemonbar -d -g 1920x40+0+0 -f &#39;Dina:style=Medium:pixelsize=13&#39; -B \#000000 -F \#eeeeee | sh
) &#38;

# uncomment to take &#39;screenshot&#39;
#(sleep 5 &#38;&#38; xwd -out &#47;tmp&#47;xenodm.xwd -root) &#38;
</code></pre>

<p>The date, time, battery percent are all piped into lemonbar. Additionally the &#8216;r&#8217; and &#8216;p&#8217; text in red allow me to reboot or power off my machine respectively.</p>

<p>It should be noted that I probably shouldn&#39;t be using a binary that&#39;s located in my user writable home directory here. Check the footnotes for other options, namely using xmessage and&#47;or xclock. Or you can just take out the lemonbar bit entirely, which I will likely do in the future.</p>

<h2 id="Xsession%20extra">Xsession extra</h2>

<p>Here&#39;s the optional bit. I&#39;m a big fan of <a href="https://github.com/vizs/declutter-home">decluttering</a> my home directory. Moving as many dotfiles out of <code>$HOME&#47;</code> as possible. Moving <code>~&#47;.Xresources</code> was easy - just source a different file from <code>~&#47;.xsession</code>. But an annoyance is <code>~&#47;.xsession</code> itself, which up until now I had no idea how to move. Turns out its location can be changed in <code>&#47;etc&#47;X11&#47;xenodm&#47;Xsession</code>!</p>

<p>Look for the line that says:</p>

<pre><code>startup=$HOME&#47;.xsession
</code></pre>

<p>Here we can change the <code>startup</code> variable to be any path we like:</p>

<pre><code>startup=${HOME}&#47;etc&#47;x&#47;xsession
</code></pre>

<p>Also, if you&#39;ve themed <a href="https://man.openbsd.org/ssh-askpass"><code>ssh-askpass(1)</code></a> like I have and want to actually see those changes when it prompts for your ssh key password then you should probably source your user Xresources before running all the ssh-related stuff.</p>

<p>Look for this part of the script:</p>

<pre><code># if we have private ssh key(s), start ssh-agent and add the key(s)
id1=$HOME&#47;.ssh&#47;identity
id2=$HOME&#47;.ssh&#47;id_dsa
id3=$HOME&#47;.ssh&#47;id_rsa
id4=$HOME&#47;.ssh&#47;id_ecdsa
id5=$HOME&#47;.ssh&#47;id_ed25519
if [ -z "$SSH_AGENT_PID" ];
then
    if [ -x &#47;usr&#47;bin&#47;ssh-agent ] &#38;&#38; [ -f $id1 -o -f $id2 -o -f $id3 -o -f $id4 -o -f $id5 ];
    then
        eval `ssh-agent -s`
        ssh-add &#60; &#47;dev&#47;null
    fi
fi
</code></pre>

<p>Just anywhere above this section simply add <code>xrdb -load $HOME&#47;path&#47;to&#47;xresources</code>.</p>

<div class="footnotes">
<hr/>
<ol>

<li id="fn1">
<p><a href="https://www.tumfatig.net/20190208/customizing-openbsd-xenodm/">https:&#47;&#47;www.tumfatig.net&#47;20190208&#47;customizing-openbsd-xenodm&#47;</a><br/>
this is the first article I read on the subject&#160;<a href="#fnref1" rev="footnote">&#8617;</a></p>
</li>

<li id="fn2">
<p><a href="https://www.vincentdelft.be/post/post_20190720">https:&#47;&#47;www.vincentdelft.be&#47;post&#47;post_20190720</a>&#160;<a href="#fnref2" rev="footnote">&#8617;</a></p>
</li>

<li id="fn3">
<p><a href="https://www.romanzolotarev.com/openbsd/xenodm.html">https:&#47;&#47;www.romanzolotarev.com&#47;openbsd&#47;xenodm.html</a><br/>
this article is the basis for my configuration, stylistically and config-wise.&#160;<a href="#fnref3" rev="footnote">&#8617;</a></p>
</li>

</ol>
</div>
</description>
<pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
</item>
<item>
<link>https://zakaria.org/posts/2020-12-08-openbsd-notes</link>
<title>OpenBSD notes</title>
<description>
<h1 id="OpenBSD%20notes">OpenBSD notes</h1>

<p>Miscellaneous notes on running <a href="https://openbsd.org/">OpenBSD</a> (some notes may only be useful for a laptop install). Updated frequently.</p>

<h2 id="Hibernate%20on%20low%20battery">Hibernate on low battery</h2>

<p>To hibernate at 5% remaining battery add in <code>&#47;etc&#47;rc.conf.local</code>:</p>

<pre><code class="language-bash">apmd_flags=-A -Z 5
</code></pre>

<h2 id="Non-root%20power%20control">Non-root power control</h2>

<p><code>&#47;etc&#47;doas.conf</code>:</p>

<pre><code>permit nopass :staff as root cmd zzz
permit nopass :staff as root cmd ZZZ
permit nopass :staff as root cmd reboot args
permit nopass :staff as root cmd shutdown args -p now
</code></pre>

<h2 id="Manual%20pages%20as%20beautifully%20typeset%20PDFs">Manual pages as beautifully typeset PDFs</h2>

<pre><code class="language-console">$ MANPAGER=zathura man -T pdf style
</code></pre>

<h2 id="X">X</h2>

<p>Xorg settings, xenodm theming. </p>

<h3 id="Run%20programs%20on%20xenodm%20login%20screen">Run programs on xenodm login screen</h3>

<p><code>&#47;etc&#47;X11&#47;xenodm&#47;Xsetup_0</code>:</p>

<pre><code class="language-bash"># comment out xconsole

xsetroot -solid \#202a2b
</code></pre>

<h3 id="Main%20xenodm%20login%20theme">Main xenodm login theme</h3>

<p><code>&#47;etc&#47;X11&#47;xenodm&#47;Xresources</code>:</p>

<pre><code>xlogin*login.translations: #override \
        Ctrl&#60;Key&#62;R: abort-display()\n\
        &#60;Key&#62;F1: set-session-argument(failsafe) finish-field()\n\
        &#60;Key&#62;Left: move-backward-character()\n\
        &#60;Key&#62;Right: move-forward-character()\n\
        &#60;Key&#62;Home: move-to-begining()\n\
        &#60;Key&#62;End: move-to-end()\n\
        Ctrl&#60;Key&#62;KP_Enter: set-session-argument(failsafe) finish-field()\n\
        &#60;Key&#62;KP_Enter: set-session-argument() finish-field()\n\
        Ctrl&#60;Key&#62;Return: set-session-argument(failsafe) finish-field()\n\
        &#60;Key&#62;Return: set-session-argument() finish-field()


xlogin.Login.echoPasswd:       true
xlogin.Login.fail:             Access Denied
xlogin.Login.greeting:
xlogin.Login.namePrompt:       \040\040login\040
xlogin.Login.passwdPrompt:     \040passwd\040

xlogin.Login.height:           200
xlogin.Login.width:            400
xlogin.Login.y:                320
xlogin.Login.frameWidth:       10
xlogin.Login.innerFramesWidth: 0

xlogin.Login.background:        #000000
xlogin.Login.foreground:        #afafaf
xlogin.Login.failColor:         red
xlogin.Login.inpColor:          #1a1f1f
xlogin.Login.promptColor:       #afafaf
xlogin.Login.hiColor:           #000000
xlogin.Login.shdColor:          #000000

! font face
xlogin.Login.face:             Dina-11
xlogin.Login.failFace:         Dina-11
xlogin.Login.promptFace:       Dina-11
</code></pre>

<h3 id="Changing%20location%20of%20%7E&amp;#47;.xsession%20(xenodm)">Changing location of ~&#47;.xsession (xenodm)</h3>

<p>Change the location through these vars in <code>&#47;etc&#47;X11&#47;xenodm&#47;Xsession</code>:</p>

<pre><code class="language-bash">startup=$HOME&#47;.xsession
resources=$HOME&#47;.Xresources
</code></pre>

<p>May also be wise to load Xresources before <code>ssh-agent</code> if <code>ssh-askpass</code> is themed:</p>

<pre><code class="language-bash"># load xresources
xrdb -load $HOME&#47;x&#47;xresources

# where ssh-agent is called below...
</code></pre>

<h2 id="PF">PF</h2>

<p>Packet Filter (firewall). General stuff to remember:</p>

<ul>
<li>last rule &#8216;wins&#8217;*</li>
<li><code>egress</code> = interface(s) that hold the default route(s)</li>
</ul>

<h3 id="Standard%20preamble">Standard preamble</h3>

<pre><code># options 
set block-policy drop
set skip on lo

# default deny
block return
block all 

# antispoofing
antispoof for egress
antispoof for $vm_int
</code></pre>

<h3 id="VMs">VMs</h3>

<p>Don&#39;t forget to <code>sysctl net.inet.ip.forwarding=1</code>!</p>

<pre><code># where:
# vm_int        = vm interface (vether[0-9])
# vm_dns_server = dns server to be used by vms

# allow ssh traffic to vm
pass out on $vm_int proto tcp to $vm_int:network port 22

# vm nat
match out on egress from $vm_int:network to any nat-to (egress)
pass in proto { tcp udp } from $vm_int:network to any port domain \
        rdr-to $vm_dns_server port domain

# allow icmp + web from vms
pass in on $vm_int proto icmp
pass in on $vm_int proto tcp to port { www, https }

# only allow X11 forwarding on the vm interface
pass in on $vm_int proto tcp to port 6000:6010
</code></pre>
</description>
<pubDate>Tue, 08 Dec 2020 00:00:00 +0000</pubDate>
</item>
<item>
<link>https://zakaria.org/posts/2020-12-05-fonts</link>
<title>How I (almost) fixed my fonts</title>
<description>
<h1 id="How%20I%20(almost)%20fixed%20my%20fonts">How I (almost) fixed my fonts</h1>

<p>This site goes through CSS changes daily. Yes, daily. I can&#39;t stop changing the CSS. It&#39;s gotten to the point where I focus more on the CSS of this site than, evidently, writing posts for it. </p>

<p>I like web fonts. But I also like simplicity and straightforwardness. Sadly, getting webfonts and CSS to work together flawlessly is no simple task. </p>

<h2 id="Google%20Fonts">Google Fonts</h2>

<p>At first I just used Google Fonts: click, click, right click, copy, paste <code>@import</code> URL. Done. Fixed. &#8230;or so I thought.</p>

<p>Using Google fonts has the unfortunate side-effect that I now depend on a 3rd-party CDN for my site to look nice. That CDN is obviously Google - that&#39;s not ideal for me.</p>

<h2 id="Self-hosting%20Google%20Fonts">Self-hosting Google Fonts</h2>

<p>So I decided to just host the fonts on this webserver. I came across this gem: <a href="https://github.com/majodev/google-webfonts-helper/">google-webfonts-helper</a>. You choose your Google fonts, it generates a zip file containing the font files, and some CSS to put on your page. Perfect! &#8230;or so I thought.</p>

<h2 id="Inline%20stylesheets">Inline stylesheets</h2>

<p>Wait. Now my fonts flash for a second. Oh, this is the fabled FOUT I&#39;ve been hearing about. Google Fonts didn&#39;t seem to have this issue, though I suppose their server is far more responsive than mine, and they do some CDN tricks or something. Here&#39;s a CSS-Tricks article I read: <a href="https://css-tricks.com/how-to-load-fonts-in-a-way-that-fights-fout-and-makes-lighthouse-happy/">https:&#47;&#47;css-tricks.com&#47;how-to-load-fonts-in-a-way-that-fights-fout-and-makes-lighthouse-happy&#47;</a>. I don&#39;t recall whether it helped me in this endeavour or not since the solution requires JavaScript (eugh).</p>

<p>I decided to just inline the stylesheet to fetch the fonts and apply them since it took the browser a bit extra to download <code>styles.css</code> and since the fonts would be loaded with the webpage it shouldn&#39;t look to bad. I added <code>font-display: fallback</code> for some extra peace of mind. </p>

<pre><code class="language-css">@font-face {
    font-family: &#39;Charter Regular&#39;;
    font-style: normal;
    font-weight: normal;
    font-display: fallback;
    src: local(&#39;Charter Regular&#39;),          local(&#39;Charter-Regular&#39;),
         url(&#39;&#47;fonts&#47;charter_regular.woff&#39;) format(&#39;woff&#39;),     &#47;* Modern Browsers *&#47;
         url(&#39;&#47;fonts&#47;charter_regular.ttf&#39;)  format(&#39;truetype&#39;); &#47;* Safari, Android, iOS *&#47;
}

@font-face {
    font-family: &#39;Charter Regular&#39;;
    font-style: normal;
    font-weight: bold;
    font-display: fallback;
    src: local(&#39;Charter Bold&#39;),          local(&#39;Charter-Bold&#39;),
         url(&#39;&#47;fonts&#47;charter_bold.woff&#39;) format(&#39;woff&#39;),     &#47;* Modern Browsers *&#47;
         url(&#39;&#47;fonts&#47;charter_bold.ttf&#39;)  format(&#39;truetype&#39;); &#47;* Safari, Android, iOS *&#47;
}

html, body {
    font-family: "Charter Regular", "Times New Roman", serif;
}

</code></pre>

<p>This still didn&#39;t give the desired result. There were still weird loading times and odd font flashes.</p>

<h2 id="The%20fix%20(sort%20of&amp;#8230;%20not%20really)">The fix (sort of&#8230; not really)</h2>

<p><em>I give up</em>.</p>

<pre><code class="language-css">html, body {
    font-family: sans-serif;
}
</code></pre>

<p>Chances are whenever you&#39;re reading this the site has already been changed to reflect this change.<br/>
Sans-serif looks better for this site anyways :P  </p>
</description>
<pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate>
</item>
<item>
<link>https://zakaria.org/posts/2020-11-07-malthusian-belt</link>
<title>Malthusian Belt</title>
<description>
<h1 id="Malthusian%20Belt">Malthusian Belt</h1>

<p>I&#39;m reading Aldous Huxtley&#39;s Brave New World and as with most books I read I&#39;ve come accross many words and phrases that I don&#39;t understand. One of which was Lenina&#39;s &#8220;Malthusian belt&#8221;. At first I thought &#8220;Malthusian&#8221; refered to the belt&#39;s geographical origin (Malta? No, that would be <em>Maltese</em>), but the word didn&#39;t fit any place I knew of so naturally I looked it up.  </p>

<p>I was surprised to find this<sup id="fnref1"><a href="#fn1" rel="footnote">1</a></sup> Wikipedia article on <em>Malthusianism</em>:  </p>

<blockquote>
<p>Malthusianism is the ideals has population growth is potentially exponential while the growth of the food supply or other resources is linear. </p>
</blockquote>

<p>Since everyone in the brave new world is born from artificial embryos, suppression of normal human conception is clearly important. The Malthusian belt must actually be some sort of birth control device that women generally wear.</p>

<p>It&#39;s a very interesting conceptual device and it makes me wonder about how on Earth Huxley came up with this idea. </p>

<p>While this may have been obvious to some from the name of it, or perhaps even the context in the book, it wasn&#39;t obvious to me. Not understanding the phrase prompted me to look it up. And hey, now I have a lot about Malthusiamism to read about. </p>

<div class="footnotes">
<hr/>
<ol>

<li id="fn1">
<p><a href="https://en.wikipedia.org/wiki/Malthusianism">https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Malthusianism</a>&#160;<a href="#fnref1" rev="footnote">&#8617;</a></p>
</li>

</ol>
</div>
</description>
<pubDate>Sat, 07 Nov 2020 00:00:00 +0000</pubDate>
</item>
<item>
<link>https://zakaria.org/posts/2020-09-09-tmux</link>
<title>Quick setup script with tmux</title>
<description>
<h1 id="Quick%20setup%20script%20with%20%3Ccode%3Etmux%3C/code%3E">Quick setup script with <code>tmux</code></h1>

<p>In my network security class we ssh into a handful of VMs pretty often.<br/>
Instead of trying to juggle 5 open terminal windows I tried to make this a bit easier to manage by having all my ssh sessions run in separate tmux windows - switching between them with <code>C-b {1,2,3,etc}</code> when necessary. I found myself doing this every time I&#39;d load up my Kali Linux VM:</p>

<pre><code>tmux
C-b c
ssh bastion
C-b c
ssh proxyserver
C-b c
ssh edgerouter
</code></pre>

<p>But then I thought, why not script this process? It should be easy enough. And it sure was easy. Here&#39;s what I came up with:</p>

<pre><code>#!&#47;bin&#47;sh

tmux new-session -d
tmux new-window -n "bastion" ssh bastion
tmux new-window -n "proxyserver" ssh proxyserver
tmux new-window -n "appserver" ssh appserver
tmux new-window -n "edgerouter" ssh edgerouter
tmux selectw -t 0

tmux attach-session -d
</code></pre>

<p>First, the script creates a new tmux session in the background. Then it opens a new window for each ssh session, naming them appropriately. After that it switches back to the first window (which is just a local shell), and finally it attaches the tmux session to the current terminal session.  </p>

<p>Now after I start my VM all I have to do is run the script (I called it <code>setupsess</code>), and I&#39;m ready to start hacking away at my messy nftables configs.</p>
</description>
<pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
</item>
<item>
<link>https://zakaria.org/posts/2020-08-03-m4</link>
<title>M4 Troubles...</title>
<description>
<h1 id="M4%20Troubles&amp;#8230;">M4 Troubles&#8230;</h1>

<p>In my <a href="https://zakaria.org/posts/2020-08-01-shblog">previous post</a> I wrote about mostly M4 templates.
Well, it turns out I&#39;ve run into some issues.</p>

<h2 id="Chapter%20I:%20The%20Problem">Chapter I: The Problem</h2>

<p>I ran my blog script to convert my markdown into a nice HTML webpage, but then something happened. Nothing. Nothing happened. The script just sat there, stuck. This was odd because the script usually runs in under a second, so something had to have gone wrong&#8230;</p>

<h2 id="Chapter%20II:%20The%20Quick%20Fix">Chapter II: The Quick Fix</h2>

<p>I turned on tracing in my <code>head.m4</code> by adding <code>traceon</code> to the start of the file then I ran the script again. I knew instantly what had gone wrong&#8230; M4 was spitting out the same HTML over and over and over again: It was expanding the macros I had written in my post! Creating an infinite loop.</p>

<p>As a quick fix in the post I replaced all occurrences of my actual macros with ones that were slightly different. It worked! &#8230;but then M4 gave another error: </p>

<pre><code>m4: unexpected end of input, unclosed parenthesis:
</code></pre>

<h2 id="Chapter%20III:%20The%20Root%20of%20All%20Evil">Chapter III: The Root of All Evil</h2>

<p>In my search for answers I came across this post: <a href="http://silas.net.br/tech/devel/m4.html">http:&#47;&#47;silas.net.br&#47;tech&#47;devel&#47;m4.html</a>. While the particular issue in on the webpage wasn&#39;t <em>my</em> issue, it gave me a hint as to what had gone wrong. M4 must have been trying to expand or evaluate something else in my post&#39;s text. Eventually I figured out that M4 was trying to run all the <code>define()</code> and <code>include()</code> statements I had written in my post. Needless to say, writing a post about M4 while using M4 for my templates was causing some issues&#8230;</p>

<p>As a crappy bandaid I added a couple of <code>sed</code>s to my script:</p>

<pre><code>article_html=$(echo "$article_html" |  sed -E -e "s&#47;define\(&#47;\&#39;!define\(!\"&#47;g" -e "s&#47;include\(&#47;\&#39;!include\(!\"&#47;g")
</code></pre>

<p>Because I only wrote <code>define</code> and <code>include</code> in my M4 code snippets for the post, this worked just fine. (Hopefully it works for this post too).</p>

<p>I may have to rethink using M4 completely because I won&#39;t lie I have no idea what I&#39;m doing - it seems like I&#39;m bound to run into this issue or a similar one in the future. Maybe Timmy was wrong; maybe I should just <code>echo</code> a bunch of HTML in my script instead, surely it can&#39;t be that messy. We&#39;ll have to see what I come up with.</p>

<h2 id="Chapter%20IV:%20Going%20Forward">Chapter IV: Going Forward</h2>

<p>For now, consider my <a href="https://zakaria.org/posts/2020-08-01-shblog">previous post</a> to be non-cannon in the <code>&#47;bin&#47;sh</code> blog series (if you can really call it a series - there hasn&#39;t even been a part II yet!).</p>
</description>
<pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
</item>
<item>
<link>https://zakaria.org/posts/2020-08-01-shblog</link>
<title>The /bin/sh Blog. Part I: Timmy's Templates</title>
<description>
<h1 id="The%20&amp;#47;bin&amp;#47;sh%20Blog.%20Part%20I:%20Timmy&amp;#39;s%20Templates">The &#47;bin&#47;sh Blog. Part I: Timmy&#39;s Templates</h1>

<p>I love Unix shell scripting, in fact I may enjoy it more than &#8220;actual&#8221; programming. I say &#8220;<a href="https://wikipedia.org/wiki/Shell_script">shell scripts</a>&#8221;, as opposed to &#8220;bash scripts&#8221;, simply because I don&#39;t use bash for my scripts. The reason why is not relevant to this post. What <em>is</em> relevant is <em>why</em> make a blog using shell scripts?<br/>
Well, <em>why not</em>? After all, Makefile blogs are a <a href="https://lobste.rs/s/0skwhg/idea_makefile_blog">thing</a> that <a href="https://github.com/MaskRay/makefile-blog">exist</a>, and Makefiles are just one way of running commands to do <em>something</em>. Hmm. I wonder, what&#39;s another way of running a bunch of commands?</p>

<blockquote>
<p>Oh! I know!</p>
</blockquote>

<p>Well, what is it Timmy?</p>

<blockquote>
<p>Why, shell scripts of course!</p>
</blockquote>

<p>Woah, thanks Timmy, why that&#39;s correct.</p>

<blockquote>
<p>But how will you ever manage a website&#39;s HTML layout all in a shell script?
Wouldn&#39;t that get messy?</p>
</blockquote>

<p>Why yes Timmy, it would get pretty messy. What we need is some kind of &#8220;template&#8221; which can take some input and output HTML which we can serve&#8230;</p>

<blockquote>
<p>What about that old M4 thing?</p>
</blockquote>

<p>&#8220;M4&#8221;, Timmy? What on earth is that?</p>

<blockquote>
<p>RFTM dude: <a href="https://en.wikipedia.org/wiki/M4_(computer_language)">https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;M4_(computer_language)</a>, <a href="https://man.openbsd.org/m4">https:&#47;&#47;man.openbsd.org&#47;m4</a></p>
</blockquote>

<p>Okay Timmy, no need to be rude now. We have guests, remember?</p>

<p>Ignoring Timmy&#39;s rude nature, we now have a way of making &#8220;templates&#8221; of sorts, to make building the HTML a little easier. First, we&#39;ll start with something (almost) every HTML document on the web has, a <code>&#60;head&#62;</code>:</p>

<pre><code>define(`_HTMLHEAD&#39;, `&#60;head&#62;   
&#60;title&#62;My Blog Lol&#60;&#47;title&#62;
&#60;link rel="stylsheet" href="&#47;style.css"&#47;&#62;
&#60;&#47;head&#62;&#39;)
</code></pre>

<p>Okay so now we have a <code>_HTMLHEAD</code> macro defined. In our m4 file, whenever we type <code>_HTMLHEAD</code>, the <code>&#60;head&#62;</code> containing our blog&#39;s title and a link to our stylesheet will be printed. There&#39;s only one problem, currently on every page our title is exactly the same. That is fine for some things, but for actual posts we should be able to set our <code>&#60;title&#62;</code> to be the title of our post. With M4 this is a piece of cake:</p>

<pre><code class="language-m4">define(`_HTMLHEAD&#39;, `&#60;head&#62;
&#60;title&#62;$1 - My Blog Lol&#60;&#47;title&#62;
&#60;link rel="stylsheet" href="&#47;style.css"&#47;&#62;
&#60;&#47;head&#62;&#39;)
</code></pre>

<blockquote>
<p>Well, what changed?</p>
</blockquote>

<p>See Timmy, on the second line, there is now a <code>$1 -</code> before the rest of the blog title.<br/>
In M4, macros can have arguments that can be placed into the macro&#39;s content. Now, if we call <code>_HTMLHEAD(`This is a post&#39;)</code>, the resulting HTML will be:</p>

<pre><code class="language-HTML">&#60;head&#62;
&#60;title&#62;This is a post - My Blog Lol&#60;&#47;title&#62;
&#60;link rel="stylsheet" href="&#47;style.css"&#47;&#62;
&#60;&#47;head&#62;
</code></pre>

<p>The <code>$1</code> has been replaced by our first argument, as expected. Nice. We can define more macros; for the navigation, footer, whatever you like. Here&#39;s a simple one that includes a <code>&#60;head&#62;</code> and also a <code>&#60;nav&#62;</code> block containing our site&#39;s navigation links:</p>

<pre><code class="language-m4">define(`_HTMLHEAD&#39;,`&#60;head&#62;
&#60;meta http-equiv="content-type" content="text&#47;html; charset=utf-8"&#62;
&#60;meta name="viewport" content="width=device-width, initial-scale=1"&#62;
&#60;title&#62;$1 - zakaria.org&#60;&#47;title&#62;
&#60;link rel="stylesheet" href="&#47;style.css"&#47;&#62;
&#60;&#47;head&#62;&#39;
)

define(`_HTMLNAV&#39;, `&#60;nav&#62;
&#60;p&#62;&#60;a href="&#47;"&#62;zakaria.org&#60;&#47;a&#62;&#60;br&#47;&#62;&#60;a href="&#47;posts&#47;"&#62;blog&#60;&#47;a&#62; &#47; &#60;a href="&#47;rss.xml"&#62;rss&#60;&#47;a&#62; &#47; &#60;a href="https:&#47;&#47;github.com&#47;e-zk&#47;"&#62;gh&#60;&#47;a&#62;&#60;&#47;p&#62; 
&#60;&#47;nav&#62;&#39;
)
</code></pre>

<p>For the sake of neatness, I&#39;ve placed this code in <code>head.m4</code>. 
For our individual posts, we need to write more M4. Here&#39;s a simple post template, we&#39;ll call it <code>post.m4</code>:</p>

<pre><code class="language-m4">include(m4&#47;head.m4)dnl
&#60;!DOCTYPE html&#62;
&#60;html&#62;
_HTMLHEAD(POSTTILE)
&#60;body&#62;
_HTMLNAV
&#60;main&#62;
POSTCONTENT
&#60;&#47;main&#62;
&#60;&#47;body&#62;
&#60;&#47;html&#62;
</code></pre>

<p>On the first line, we include the macros in our <code>head.m4</code>, then on line 4 we &#8220;call&#8221; our <code>_HTMLHEAD</code> macro, then shortly after we call our <code>_HTMLNAV</code> macro. M4 fills in these macros with whatever they&#39;re defined as, in our case our <code>&#60;head&#62;</code> and <code>&#60;nav&#62;</code> blocks of HTML. Neat? Right?<br/>
Moving on-</p>

<blockquote>
<p>I&#39;m confused</p>
</blockquote>

<p>About what, Timmy?</p>

<blockquote>
<p>Those strange upper-case words littered throughout the file: <code>POSTTILE</code> and <code>POSTCONTENT</code>.</p>
</blockquote>

<p>Oh! Thank you Timmy, I almost forgot. These are also macros, much the same as our <code>_HTMLNAV</code> and <code>_HTMLHEAD</code> ones, but they aren&#39;t defined in any of the M4 files we&#39;re using. That&#39;s because we define these macros when we <em>run</em> <code>m4</code> itself:</p>

<pre><code class="language-console">$ m4 -DPOSTTILE="Hello?" post.m4
</code></pre>

<p>The <code>-D</code> argument defines a symbol to have some value. In this case <code>POSTTILE</code> now becomes <code>Hello?</code> after M4 is done running. Try running:</p>

<pre><code class="language-console">$ m4 -DPOSTTILE="Test" -DPOSTCONTENT="&#60;h1&#62;Test :P&#60;&#47;h1&#62;" post.m4
</code></pre>

<p>M4 should output a &#8220;complete&#8221; HTML document, with the title &#8220;Test&#8221; and with a single heading reading &#8220;Test :P&#8221;. </p>

<p>Now that we have a (an?) M4 template set up, instead of <code>echo</code>ing a bunch of <code>&#60;html&#62;</code> in our script, now all we have to do is call <code>m4</code> and pass arguments to it for our content to show up in the resulting HTML.</p>

<p>Don&#39;t be mad. But that&#39;s the end of this post. <em>I know, I know</em> we didn&#39;t actually write any shell script just yet, (Timmy is giving me the stink eye right now), but that&#39;s for another time.<br/>
Stay tuned for part II.</p>
</description>
<pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
</item>
</channel>
</rss>
